#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/fredy_common"

usage() {
	echo "$PROG_NAME $VERSION"
	echo ""
	echo "Usage: $PROG_NAME [-hV]"
	echo "Usage: $PROG_NAME <command> [options]"
	echo ""
	echo "Options:"
	echo "  -h, --help       Print this help"
	echo "  -V, --version    Print current version"
	echo ""
	echo "Commands:"
	echo "  star             Align RNA-seq data against the genome using"
	echo "                   STAR (DOI: 10.1093/bioinformatics/bts635)"
	echo "  string           Assemble aligned reads (compatible with both"
	echo "                   short and long reads) using StringTie2"
	echo "                   (DOI: 10.1186/s13059-019-1910-1)"
	echo "  chimeric         Identify potential chimeric transcripts"
	echo "  coding           Compute the coding potential of (chimeric)"
	echo "                   transcripts using RNASamba"
	echo "                   (DOI: https://doi.org/10.1093/nargab/lqz024)"
	echo "  pfam             Search for protein domains using HMMer"
	echo "                   (DOI: 10.1093/nar/gkr367) and Pfam protein"
	echo "                   families and domains"
	echo "                   (https://doi.org/10.1093/nar/gkaa913)"
	echo "  expression       Estimate transcript expression using"
	echo "                   StringTie2 (DOI: 10.1186/s13059-019-1910-1)"
	echo "  results          Compile the final results of chimeric"
	echo "                   transcripts incorporating inputs from"
	echo "                   previous steps"
	echo ""
}

parse_opt() {
	# TEMP cannot be local
	TEMP=$(getopt \
		-o 'hV' \
		--long 'help,version' \
		-n "$PROG_NAME" -- "$@") \
		|| try_help_and_die

	eval set -- "$TEMP"
	unset TEMP

	while true; do
		case "$1" in
			-h|--help)
				usage
				exit
				;;
			-V|--version)
				echo "$VERSION"
				exit
				;;
			--)
				shift
				break
				;;
			*)
				error "Internal error!"
				;;
		esac
	done
}

parse_cmd() {
	local cmd="$1"; shift

	case "$cmd" in
		star)       ;;
		string)     ;;
		chimeric)   ;;
		coding)     ;;
		pfam)       ;;
		expression) ;;
		results)    ;;
		*)
			try_help_and_die "'$cmd' is not a valid command"
			;;
	esac

	exec "$BIN_DIR/${PROG_NAME}_${cmd}" "$@"
}

[[ $# -eq 0 ]] && { usage; exit; }

if [[ "$1" =~ ^- ]]; then
	parse_opt "$@"
else
	parse_cmd "$@"
fi
