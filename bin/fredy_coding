#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/fredy_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

# Dep files: chimeric
CHIMERIC_FASTA="chimeric/chimeric.fasta"
CHIMERIC_MOST_SHARED_TSV="chimeric/most_shared.tsv"

usage() {
	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo ""
	echo "Usage: $PROG_NAME $CMD_NAME [-h] [-P NUM] -o DIR -m FILE -d FILE"
	echo ""
	echo "Mandatory Options:"
	echo "  -o, --output-dir      Output directory which must have been"
	echo "                        created in the previous steps"
	echo "  -m, --protein-model   File with the model of RNASamba"
	echo "  -d, --protein-db      File with the protein sequences"
	echo ""
	echo "Options:"
	echo "  -h, --help            Print this help"
	echo "  -P, --probability     Set the cutoff for selecting transcripts"
	echo "                        considered to be protein-coding, based"
	echo "                        on the probability provided by RNASamba"
	echo "                        [default: $coding_filter]"
	echo ""
}

validate_opt() {
	# Mandatory options '-o', '-m' and '-d'
	if [[ -z "$output_dir" ]]; then
		try_help_and_die "Missing '-o' option"
	elif [[ ! -d "$output_dir" ]]; then
		error "No such dir '$output_dir'.\nStart" \
			"your analysis from '$PROG_NAME string'"
	fi

	if [[ -z "$protein_model" ]]; then
		try_help_and_die "Missing '-m' option"
	elif [[ ! -f "$protein_model" ]]; then
		error "No such file '$protein_model'"
	fi

	if [[ -z "$protein_db" ]]; then
		try_help_and_die "Missing '-d' option"
	elif [[ ! -f "$protein_db" ]]; then
		error "No such file '$protein_db'"
	fi

	# Options '-P'
	if awk 'typeof($1) ~/number|strnum/ && $1>=0 && $1<=1 {exit(1)} {exit(0)}' <<< $coding_filter; then
		try_help_and_die "'$coding_filter' is not a valid '-P' option"
	fi
}

validate_dep() {
	# chimeric
	if [[ ! -f "$chimeric_fasta" ]]; then
		error "'$chimeric_fasta' not found.\nMaybe" \
			"you need to run '$PROG_NAME chimeric' before"
	fi

	if [[ ! -f "$chimeric_most_shared_tsv" ]]; then
		error "'$chimeric_most_shared_tsv' not found.\nMaybe" \
			"you need to run '$PROG_NAME chimeric' before"
	fi
}

# Options
output_dir=""
protein_model=""
protein_db=""
coding_filter=0.9

# Processing variables
cod="" # Current output dir
chimeric_fasta=""
chimeric_most_shared_tsv=""

[[ $# -eq 0 ]] && { usage; exit; }

TEMP=$(getopt \
	-o 'ho:m:d:P:' \
	--long 'help,output-dir:,protein-model:,protein-db:,probability:' \
	-n "$PROG_NAME $CMD_NAME" -- "$@") \
	|| try_help_and_die

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		-h|--help)
			usage
			exit
			;;
		-o|--output-dir)
			output_dir="$2"
			shift 2
			;;
		-m|--protein-model)
			protein_model="$2"
			shift 2
			;;
		-d|--protein-db)
			protein_db="$2"
			shift 2
			;;
		-P|--probability)
			coding_filter="$2"
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			error "Internal error!"
			;;
	esac
done

# Check for errors in opt
validate_opt

# Set the dep files paths
chimeric_fasta="$output_dir/$CHIMERIC_FASTA"
chimeric_most_shared_tsv="$output_dir/$CHIMERIC_MOST_SHARED_TSV"

# Check for errors in dep
validate_dep

# MAIN

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

#Rodar o RNASamba
log_info "Running RNASamba"

# predicted_proteins.fa e chimeric.fasta?
rnasamba classify \
	-p "$cod/predicted_proteins.fa" \
	"$cod/classification.tsv" \
	"$chimeric_fasta" \
	"$protein_model" \
	2> "$cod/classification.tsv.log" \
	|| log_error \
		"rnasamba failed:" \
		"See '$(readlink -f "$cod/classification.tsv.log")'" \
		"for more details"

#Movendo os resultados do RNASamba para o output
#mv ann/* output/

#Selecionando somente os transcritos dos protein_coding com protencial codificante
log_info "Selecting chimeric transcripts with coding potential"
awk -v OFS="\t" -v filter="$coding_filter" '
	NR==FNR && NR>1 && $3>=filter {
		v[$1]=1;
		next
	}
	v[$1] {
		a=gensub(/\.[0-9]+$/,"",1,$1);
		b=gensub(/\.[0-9]+$/,"",1,$2);
		print a,b
	}' \
		"$cod/classification.tsv" \
		"$chimeric_most_shared_tsv" \
		| sort -u > "$cod/coding.txt"

#awk '{if ($3 >= 0.9) print $1}' "$cod/classification.tsv" \
	#| sed 1d | grep -wf - "$chimeric_most_shared_tsv" \
	#| cut -d . -f 1,2,3 \
	#| sort -u \
	#| awk '{print $2"\t"$1}' \
	#| cut -d . -f 1,2 \
	#|  awk '{print $2"\t"$1}' \
	#> "$cod/coding.txt"

awk -v filter="$coding_filter" '
	NR>1 && $3>=filter {
		split($1,v,".");
		print $1,"gene="v[1]"."v[2]
	}' \
		"$cod/classification.tsv" \
		> "$cod/transcript.txt"
#awk '{if ($3 >= 0.9) print $1}' "$cod/classification.tsv" \
	#| sed 1d \
	#| awk -F'.' '{print $1"."$2"."$3" gene="$1"."$2}' \
	#> "$cod/transcript.txt"

#Selecionando a sequencia de AA dos respectivos.
seqtk subseq \
	"$cod/predicted_proteins.fa" \
	"$cod/transcript.txt" \
	> "$cod/novel_proteins.fa" \
	2> "$cod/novel_proteins.fa.log" \
	|| log_error \
		"seqtk failed:" \
		"See '$(readlink -f "$cod/novel_proteins.fa.log")'" \
		"for more details"

if [[ ! -s "$cod/novel_proteins.fa" ]]; then
	log_warn "Novel proteins were not found"
fi

seqtk subseq \
	"$protein_db" \
	<(cut -f 2 "$cod/coding.txt") \
	> "$cod/ann_proteins.fa" \
	2> "$cod/ann_proteins.fa.log" \
	|| log_error \
		"seqtk failed:" \
		"See '$(readlink -f "$cod/ann_proteins.fa.log")'" \
		"for more details"

if [[ ! -s "$cod/ann_proteins.fa" ]]; then
	log_warn "Proteins from '$protein_db' were not found"
fi

log_info "Done"
