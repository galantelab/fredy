#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/fredy_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

# Dep files: string
STRING_MERGE_GTF="string/merge.gtf"

usage() {
	local name_space=$(echo "$PROG_NAME $CMD_NAME" | tr '[:alnum:]' ' ')

	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo ""
	echo "Usage: $PROG_NAME $CMD_NAME [-h] [-T DIR] [-t INT] [-S] [-L]"
	echo "       $name_space [-f FILE] -o DIR <FILE> ..."
	echo ""
	echo "Arguments:"
	echo "  One or more alignment files in BAM format. If no BAM files are"
	echo "  provided as arguments and the '-f' option is not used, it is"
	echo "  assumed that the 'star' command has been executed previously,"
	echo "  and its resulting BAM files will be utilized in the analysis"
	echo ""
	echo "Mandatory Options:"
	echo "  -o, --output-dir    Output directory which must have been"
	echo "                      created in the previous steps"
	echo "  -f, --file          File containing a newline separated list"
	echo "                      of alignment files in BAM format. This"
	echo "                      option is not mandatory if one or more"
	echo "                      BAM files are passed as argument or if"
	echo "                      the 'star' command has been executed"
	echo ""
	echo "Options:"
	echo "  -h, --help          Print this help"
	echo "  -T, --temp-dir      Use DIR for temporaries [default: $temp_dir]"
	echo "  -t, --threads       Number of threads [default: $threads]"
	echo "  -S, --short-reads   Set the sequencing to short reads [default]"
	echo "  -L, --long-reads    Set the sequencing to long reads"
	echo ""
}

validate_opt() {
	local bam

	# Mandatory options '-o' and '-f'
	if [[ -z "$output_dir" ]]; then
		try_help_and_die "Missing '-o' option"
	elif [[ ! -d "$output_dir" ]]; then
		error "No such dir '$output_dir'.\nStart" \
			"your analysis from '$PROG_NAME string'"
	fi

	# If there is no bam_list test for args
	# If there is no args, test for files from 'star'
	# Then, check for valid bam files
	if [[ -n "$bam_list" ]]; then
		if [[ -f "$bam_list" ]]; then
			error "No such file '$bam_list'"
		fi
		while read bam; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done < "$bam_list"
	elif [[ "${#bams[@]}" -gt 0 ]]; then
		for bam in "${bams[@]}"; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done
	elif [[ "${#bams_star[@]}" -gt 0 ]]; then
		for bam in "${bams_star[@]}"; do
			if [[ ! -f "$bam" ]]; then
				error "No such file '$bam'"
			fi
		done
	else
		try_help_and_die \
			"Neither the '-f' option nor BAM files," \
			"as argument or generated by the 'star'" \
			"subcommand, were passed"
	fi

	# Options
	if [[ "$is_short" && "$is_long" ]]; then
		try_help_and_die "Both '-S' and '-L' are set." \
			"You need to choose between short and long reads"
	fi

	if awk 'typeof($1) ~/number|strnum/ && $1>0 {exit(1)} {exit(0)}' <<< $threads; then
		try_help_and_die "'$threads' is not a valid '-t' option"
	fi
}

validate_dep() {
	if [[ ! -f "$string_merge_gtf" ]]; then
		error "'$string_merge_gtf' not found.\nMaybe" \
			"you need to run '$PROG_NAME string' before"
	fi
}

# Options
output_dir=""
temp_dir="/tmp"
threads=8
bam_list=""
bams_star=()
bams=()
is_short=
is_long=

# Processing variables
cod="" # Current output dir
tdir=""
paramet="-e" # for 'short'
stringtie_threads=2
parallel_max_procs=1
arq=""
end=
string_merge_gtf=""

[[ $# -eq 0 ]] && { usage; exit; }

TEMP=$(getopt \
	-o 'hT:o:t:SLf:' \
	--long 'help,temp-dir:,output-dir:,threads:,short-reads,long-reads,file:' \
	-n "$PROG_NAME $CMD_NAME" -- "$@") \
	|| try_help_and_die

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		-h|--help)
			usage
			exit
			;;
		-T|--temp-dir)
			temp_dir="$2"
			shift 2
			;;
		-o|--output-dir)
			output_dir="$2"
			shift 2
			;;
		-f|--file)
			bam_list="$2"
			shift 2
			;;
		-t|--threads)
			threads="$2"
			shift 2
			;;
		-S|--short-reads)
			is_short=1
			shift
			;;
		-L|--long-reads)
			is_long=1
			shift
			;;
		--)
			shift
			break
			;;
		*)
			error "Internal error!"
			;;
	esac
done

# Get the files if they were passed as arg
for arg; do
	bams+=("$arg")
done

# Get the file if they were generated by subcommand 'star'
if [[ -d "$output_dir/star" ]]; then
	mapfile \
		-t bams_star \
		< <(find "$output_dir/star" -name "*.$PROG_NAME.bam" -type 'f')
fi

# Default value is '--short-reads'
if [[ -z "$is_short" && -z "$is_long" ]]; then
	is_short=1
fi

# Check for errors in opt
validate_opt

# Set the dep files paths
string_merge_gtf="$output_dir/$STRING_MERGE_GTF"

# Check for errors in dep
validate_dep

# MAIN

# Load all files from $bam_list file to $bams=()
if [[ -n "$bam_list" ]]; then
	# Reset bams=() - just in case
	bams=()
	while read; do
		bams+=("$REPLY")
	done < "$bam_list"
elif [[ "${#bams[@]}" -eq 0 ]]; then
	# If there is neither $bam_list nor @bams, then
	# get BAMs from 'star' dir
	bams=("${bams_star[@]}")
fi

# Sort bams=()
bams=($(printf "%s\0" "${bams[@]}" | sort -z | xargs -0n1))

if [[ "$is_long" ]]; then
	paramet+=" -L"
fi

# The max number of jobs is threads, then
# set stringtie_threads and parallel_max_procs accordingly
if (( threads < stringtie_threads )); then
	stringtie_threads=$threads
else
	parallel_max_procs=$(( threads / stringtie_threads ))
fi

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

# Create a temp dir
tdir=$(mktemp -d --tmpdir="$temp_dir")

# Remove it automagicly
trap 'rm -rf "$tdir"' EXIT

log_info "Performing expression"
parallel \
	--max-procs=$parallel_max_procs \
	--joblog="$cod/stringtie_job.log" \
	stringtie \
		'{}' \
		"$paramet" \
		-G "$string_merge_gtf" \
		-p $stringtie_threads \
		-o "$cod"/'{/.}'.gtf \
		'2>' "$cod"/'{/.}'.gtf.log \
	::: "${bams[@]}"

if [[ "$?" -ne 0 ]]; then
	log_error \
		"stringtie failed:" \
		"See '$(readlink -f "$cod/stringtie_job.log")'" \
		"for more details"
fi

log_info 'Merging samples ...'

merge_sample() {
	awk -v OFS='\t' '
		$3 == "transcript" {
			gsub(/[;"]/,"");
			if ($12 !~/MSTRG/ && $12 !~/unknow/)
				print $10,$12,$20
			else if ($12 ~/MSTRG/)
				print $10,$12,$18
		}' "$1" | sort -k1,1
}

export -f merge_sample

parallel \
	--max-procs=$parallel_max_procs \
	--joblog="$cod/merge_job.log" \
	merge_sample '{}' '>' "$cod"/'{/.}'.tsv \
	::: "$cod"/*.gtf

if [[ "$?" -ne 0 ]]; then
	log_error \
		"parallel failed when merging samples:" \
		"See '$(readlink -f "$cod/merge_job.log")'" \
		"for more details"
fi

# Create header
printf '\t%s' 'transcript_id' "${bams[@]}" \
	| cut -f 2- \
	> "$tdir/header.tsv"

arq=$(ls "$cod"/*.tsv | head -n1)
cut -f 2 "$arq" > "$tdir/transcript_id.tsv"

end=$(( 3 * $(ls "$cod"/*.tsv | wc -l) ))
paste "$cod"/*.tsv \
	| cut -f $(seq -s, 3 3 $end) \
	> "$tdir/expression.tsv"

cat \
	"$tdir/header.tsv" \
	<(paste "$tdir/transcript_id.tsv" "$tdir/expression.tsv") \
	> "$cod/expression.tsv"

log_info "Done"
