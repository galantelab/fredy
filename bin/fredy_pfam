#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/fredy_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

# Dep files: coding
CODING_NOVEL_PROTEINS_FASTA="coding/novel_proteins.fa"
CODING_ANN_PROTEINS_FASTA="coding/ann_proteins.fa"
CODING_TRANSCRIPT_TXT="coding/transcript.txt"
CODING_CODING_TXT="coding/coding.txt"

usage() {
	local name_space=$(echo "$PROG_NAME $CMD_NAME" | tr '[:alnum:]' ' ')

	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo ""
	echo "Usage: $PROG_NAME $CMD_NAME [-h] [-T DIR] [-E NUM] [-t INT]"
	echo "       $name_space -o DIR -M FILE"
	echo ""
	echo "Mandatory Options:"
	echo "  -o, --output-dir   Output directory which must have been"
	echo "                     created in the previous steps"
	echo "  -M, --pfam-model   A database of protein domain families"
	echo "                     to be used as an index for HMmer tool"
	echo ""
	echo "Options:"
	echo "  -h, --help         Print this help"
	echo "  -T, --temp-dir     Use DIR for temporaries [default: $temp_dir]"
	echo "  -t, --threads      Number of threads [default: $threads]"
	echo "  -E, --e-value      In the HMmer per-target output, report"
	echo "                     target sequences with an e-value lesser"
	echo "                     than NUM [default: $e_value]"
	echo ""
}

validate_opt() {
	# Mandatory option '-o' and '-M'
	if [[ -z "$output_dir" ]]; then
		try_help_and_die "Missing '-o' option"
	elif [[ ! -d "$output_dir" ]]; then
		error "No such dir '$output_dir'.\nStart" \
			"your analysis from '$PROG_NAME string'"
	fi

	if [[ -z "$pfam_model" ]]; then
		try_help_and_die "Missing '-M' option"
	elif [[ ! -f "$pfam_model" ]]; then
		error "No such file '$pfam_model'"
	fi

	# Options '-E' and '-t'
	if awk 'typeof($1) ~/number|strnum/ && $1>=0 {exit(1)} {exit(0)}' <<< $e_value; then
		try_help_and_die "'$e_value' is not a valid '-E' option"
	fi

	if awk 'typeof($1) ~/number|strnum/ && $1>0 {exit(1)} {exit(0)}' <<< $threads; then
		try_help_and_die "'$threads' is not a valid '-t' option"
	fi
}

validate_dep() {
	if [[ ! -f "$coding_novel_proteins_fasta" ]]; then
		error "'$coding_novel_proteins_fasta' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	if [[ ! -f "$coding_ann_proteins_fasta" ]]; then
		error "'$coding_ann_proteins_fasta' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	if [[ ! -f "$coding_transcript_txt" ]]; then
		error "'$coding_transcript_txt' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	if [[ ! -f "$coding_coding_txt" ]]; then
		error "'$coding_coding_txt' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi
}

# Options
output_dir=""
temp_dir="/tmp"
pfam_model=""
e_value=1e-6
threads=4

# Processing variables
cod="" # Current output dir
tdir=""
coding_novel_proteins_fasta=""
coding_ann_proteins_fasta=""
coding_transcript_txt=""
coding_coding_txt=""

[[ $# -eq 0 ]] && { usage; exit; }

TEMP=$(getopt \
	-o 'hT:o:M:E:t:' \
	--long 'help,temp-dir:,output-dir:,pfam-model:,e-value:,threads:' \
	-n "$PROG_NAME $CMD_NAME" -- "$@") \
	|| try_help_and_die

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		-h|--help)
			usage
			exit
			;;
		-T|--temp-dir)
			temp_dir="$2"
			shift 2
			;;
		-o|--output-dir)
			output_dir="$2"
			shift 2
			;;
		-M|--pfam-model)
			pfam_model="$2"
			shift 2
			;;
		-E|--e-value)
			e_value="$2"
			shift 2
			;;
		-t|--threads)
			threads="$2"
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			error "Internal error!"
			;;
	esac
done

# Check for errors in opt
validate_opt

# Set the dep files paths
coding_novel_proteins_fasta="$output_dir/$CODING_NOVEL_PROTEINS_FASTA"
coding_ann_proteins_fasta="$output_dir/$CODING_ANN_PROTEINS_FASTA"
coding_transcript_txt="$output_dir/$CODING_TRANSCRIPT_TXT"
coding_coding_txt="$output_dir/$CODING_CODING_TXT"

# Check for errors in dep
validate_dep

# MAIN

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

# Create a temp dir
tdir=$(mktemp -d --tmpdir="$temp_dir")

# Remove it automagicly
trap 'rm -rf "$tdir"' EXIT

log_info "Running PFAM..."
cat \
	"$coding_novel_proteins_fasta" \
	"$coding_ann_proteins_fasta" \
	> "$tdir/pfam.fa"

if [[ ! -s "$tdir/pfam.fa" ]]; then
	log_error \
		"The files '$(readlink -f "$coding_novel_proteins_fasta")'" \
		"and '$(readlink -f "$coding_ann_proteins_fasta")'" \
		"are empty. It will not continue with the analysis"
fi

# O usuário que passe o modelo?
#if ! [ -f /home/ref/Pfam-A.hmm ]; then
#	wget --directory-prefix=/home/ref/ ftp://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam31.0/Pfam-A.hmm.gz
#	gunzip /home/ref/Pfam-A.hmm.gz
#	hmmpress /home/ref/Pfam-A.hmm
#fi

# --cpu e -E podem ser passado pelo usuário?
hmmsearch \
	--tblout "$cod/pfam.hmm" \
	-E $e_value \
	--cpu $threads \
	"$pfam_model" \
	"$tdir/pfam.fa" \
	> "$cod/pfam.hmm.stdout.log" \
	2> "$cod/pfam.hmm.stderr.log" \
	|| log_error \
		"hmmsearch failed:" \
		"See '$(readlink -f "$cod/pfam.hmm.stderr.log")'" \
		"for more details"

log_info "Comparing chimeric domains with host domains"
sed "s/\ gene=/\t/g" "$coding_transcript_txt" > "$tdir/transcript.txt"

join -1 2 -2 1 \
	<(sort -k2,2 "$tdir/transcript.txt") \
	<(sort -k1,1 "$coding_coding_txt") \
	| sed 's/ /\t/g' \
	> "$tdir/join.txt"

while read gene trans host; do
	awk -v t="$trans" -v h="$host" '
		/^#/ {next}
		$_ ~t || $_~h {
			print $1,$3,$6,$4
		}' \
		"$cod/pfam.hmm" \
		> "$tdir/$trans.$host.txt"

	#grep -w "$trans" \
		#"$cod/pfam.hmm" \
		#> "$tdir/$trans.$host.txt"

	#grep -w "$host" \
		#"$cod/pfam.hmm" \
		#>> "$tdir/$trans.$host.txt"

	#grep -v '#' "$tdir/$trans.$host.txt" \
		#| awk -F" " '{print $1,$3,$6,$4}' \
		#> "$tdir/pfam.txt"

	#python3 "$BIN_DIR/../scripts/comp_dom.py" \
		#"$tdir/$trans.$host.txt" \
		#"$trans" \
		#> "$tdir/$trans.$host.pfam.tsv" \
		#|| log_error "'comp_dom.py' failed"
	python3 "$BIN_DIR/../$SCRIPTS_PYTHON/comp_dom.py" \
		"$tdir/$trans.$host.txt" \
		"$trans" \
		|| log_error "'comp_dom.py' failed"
done < "$tdir/join.txt" | sed '/^#/d' | sort -k1,1 > "$cod/info_dom.tsv"

## Talves esta parte possa ser simplificada para:
## cat "$tdir"/*.pfam.tsv | grep -v '#' > "$cod/info_dom.tsv"?
#for trans in $(cut -f 2 "$tdir/transcript.txt"); do
	#log_info ":: $trans"
	#cat "$tdir/$trans".*.pfam.tsv \
		#| grep -v '#' \
		#> "$tdir/$trans.pfamf.tsv"
#done

#cat "$tdir"/*.pfamf.tsv > "$cod/info_dom.tsv"

log_info "Done"
