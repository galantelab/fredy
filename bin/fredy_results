#!/usr/bin/env bash

# Bash pragmas
set -o errexit
set -o pipefail
set -o nounset

# Where I am
BIN_DIR="$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)"

# Load common lib
source "$BIN_DIR/../lib/fredy_common"

# My name
SCRIPT_NAME="${0##*/}"

# Command name
CMD_NAME="${SCRIPT_NAME#${PROG_NAME}_}"

# Dep files: string
STRING_MERGE_GTF="string/merge.gtf"

# Dep files: chimeric
CHIMERIC_MOST_SHARED_TSV="chimeric/most_shared.tsv"
CHIMERIC_INFO_TSV="chimeric/info.tsv"

# Dep files: coding
CODING_CLASSIFICATION_TSV="coding/classification.tsv"

# Dep files: pfam
PFAM_INFO_DOM_TSV="pfam/info_dom.tsv"

# Dep files: expression
EXPRESSION_EXPRESSION_TSV="expression/expression.tsv"

usage() {
	echo "$PROG_NAME $VERSION"
	echo "$PROG_NAME $CMD_NAME (aka $SCRIPT_NAME)"
	echo ""
	echo "Usage: $PROG_NAME $CMD_NAME [-h] [-T DIR] -o DIR"
	echo ""
	echo "Mandatory Options:"
	echo "  -o, --output-dir   Output directory which must have been"
	echo "                     created in the previous steps"
	echo ""
	echo "Options:"
	echo "  -h, --help         Print this help"
	echo "  -T, --temp-dir     Use DIR for temporaries [default: $temp_dir]"
	echo ""
}

validate_opt() {
	# Mandatory options '-o'
	if [[ -z "$output_dir" ]]; then
		try_help_and_die "Missing '-o' option"
	elif [[ ! -d "$output_dir" ]]; then
		error "No such dir '$output_dir'.\nStart" \
			"your analysis from '$PROG_NAME string'"
	fi
}

validate_dep() {
	# string
	if [[ ! -f "$string_merge_gtf" ]]; then
		error "'$string_merge_gtf' not found.\nMaybe" \
			"you need to run '$PROG_NAME string' before"
	fi

	# chimeric
	if [[ ! -f "$chimeric_most_shared_tsv" ]]; then
		error "'$chimeric_most_shared_tsv' not found.\nMaybe" \
			"you need to run '$PROG_NAME chimeric' before"
	fi

	if [[ ! -f "$chimeric_info_tsv" ]]; then
		error "'$chimeric_info_tsv' not found.\nMaybe" \
			"you need to run '$PROG_NAME chimeric' before"
	fi

	# coding
	if [[ ! -f "$coding_classification_tsv" ]]; then
		error "'$coding_classification_tsv' not found.\nMaybe" \
			"you need to run '$PROG_NAME coding' before"
	fi

	# pfam
	if [[ ! -f "$pfam_info_dom_tsv" ]]; then
		error "'$pfam_info_dom_tsv' not found.\nMaybe" \
			"you need to run '$PROG_NAME pfam' before"
	fi

	# expression
	if [[ ! -f "$expression_expression_tsv" ]]; then
		error "'$expression_expression_tsv' not found.\nMaybe" \
			"you need to run '$PROG_NAME expression' before"
	fi
}

# Options
output_dir=""
temp_dir="/tmp"

# Processing variables
cod="" # Current output dir
tdir=""
string_merge_gtf=""
chimeric_most_shared_tsv=""
chimeric_info_tsv=""
coding_classification_tsv=""
pfam_info_dom_tsv=""
expression_expression_tsv=""

[[ $# -eq 0 ]] && { usage; exit; }

TEMP=$(getopt \
	-o 'hT:o:' \
	--long 'help,temp-dir:,output-dir:' \
	-n "$PROG_NAME $CMD_NAME" -- "$@") \
	|| try_help_and_die

eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
		-h|--help)
			usage
			exit
			;;
		-T|--temp-dir)
			temp_dir="$2"
			shift 2
			;;
		-o|--output-dir)
			output_dir="$2"
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			error "Internal error!"
			;;
	esac
done

# Check for errors in opt
validate_opt

string_merge_gtf="$output_dir/$STRING_MERGE_GTF"
chimeric_most_shared_tsv="$output_dir/$CHIMERIC_MOST_SHARED_TSV"
chimeric_info_tsv="$output_dir/$CHIMERIC_INFO_TSV"
coding_classification_tsv="$output_dir/$CODING_CLASSIFICATION_TSV"
pfam_info_dom_tsv="$output_dir/$PFAM_INFO_DOM_TSV"
expression_expression_tsv="$output_dir/$EXPRESSION_EXPRESSION_TSV"

# Check for errors in dep
validate_dep

# MAIN

# Output dir concerning this command
cod="$output_dir/$CMD_NAME"

# Create the base
mkdir -p "$cod"

# Create a temp dir
tdir=$(mktemp -d --tmpdir="$temp_dir")

# Remove it automagicly
trap 'rm -rf "$tdir"' EXIT

> "$tdir/nsamplespertranscript.tsv"

log_info "Step1"
#for i in $(cut -f 1 "$chimeric_most_shared_tsv" | sort -u); do
	#n_samples=$(grep -w "$i" "$expression_expression_tsv" \
		#| tr -t '\t' '\n' \
		#| awk '{if ($1 > 0) print}' \
		#| grep -v MSTRG \
		#| wc -l)
	#echo -e "$i\t$n_samples"
#done > "$tdir/nsamplespertranscript.tsv"
awk -v OFS="\t" '
	FNR==NR{
		genes[$1];
		 next
	}
	FNR!=NR{
		for (gene in genes){
			for (i=2; i<=NF; i++){
				if ($1==gene && $i > 0){
					count[gene]++
				}
			}
		}
	}
	END{
		for (gene in genes){
			print gene"\t"count[gene]
		}
	}' \
	"$chimeric_most_shared_tsv" \
	"$expression_expression_tsv" \
	> "$tdir/nsamplespertranscript.tsv"

log_info "Step2"
Rscript "$BIN_DIR/../$SCRIPTS_R/median.R" \
	"$expression_expression_tsv" \
	"$cod/median.tsv" \
	|| log_error "median.R failed"

#awk -F '.' '{print $0"\t"$1"."$2}' \
	#"$chimeric_most_shared_tsv" \
	#> "$tdir/most_shared.tsv"
awk -v OFS="\t" '
	{
		split($1,v,".");
		print $_,v[1]"."v[2]
	}' \
	"$chimeric_most_shared_tsv" \
	> "$tdir/most_shared.tsv"

#Colocar uma coluna 4 com o id_gene não so o id_trans (MSTRG.X além de MSTRG.X.Y)
log_info "Step3"
> "$tdir/host_expression"
> "$tdir/chimeric_expression"
> "$tdir/psi.tsv"

#for i in $(cut -f 4 "$tdir/most_shared.tsv" | sort -u); do
	#head -n1 \
		#"$expression_expression_tsv" \
		#> "$tdir/chimeric_expression"

	#head -n1 \
		#"$expression_expression_tsv" \
		#> "$tdir/host_expression"

	#grep -w "$i" \
		#"$tdir/most_shared.tsv" \
		#| cut -f 1 \
		#| fgrep -wf - "$expression_expression_tsv" \
		#>> "$tdir/chimeric_expression"

	#grep -w "$i" "$tdir/most_shared.tsv" \
		#| cut -f 2 \
		#| fgrep -wf - "$string_merge_gtf" \
		#| fgrep -v exon \
		#| awk -F '"' '{print $4}' \
		#| fgrep -wf - "$expression_expression_tsv" \
		#>> "$tdir/host_expression"

	#Rscript "$BIN_DIR/../scripts/psi.R" \
		#"$tdir/host_expression" \
		#"$tdir/chimeric_expression" \
		#"$i" \
		#|| log_error "psi.R failed"
#done > "$tdir/psi.tsv"

for i in $(cut -f 4 "$tdir/most_shared.tsv" | sort -u); do
	head -n1 \
		"$expression_expression_tsv" \
		> "$tdir/chimeric_expression"

	head -n1 \
		"$expression_expression_tsv" \
		> "$tdir/host_expression"

	awk -v filter="$i" '
		NR==FNR && $4==filter {
			v[$1]=1;
			next
		}
		v[$1]' \
		"$tdir/most_shared.tsv" \
		"$expression_expression_tsv" \
		>> "$tdir/chimeric_expression"

	awk -F "\t" -v filter="$i" '
		ARGIND==1 && $4==filter {
			v[$2]=1;
			next
		}
		ARGIND==2 && $3 != "exon" {
			for (k in v) {
				if ($9 ~k) {
					check=1;
					break
				}
			}
		}
		check {
			n=split($9,a,"; ");
			for (i=1;i<=n;i++) {
				split(a[i],x," ");
				if (x[1] == "transcript_id") {
					id=x[2];
					gsub(/"/,"",id);
					u[id]=1;
					break
				}
			}
			check=0
		}
		ARGIND==3 && u[$1]' \
		"$tdir/most_shared.tsv" \
		"$string_merge_gtf" \
		"$expression_expression_tsv" \
		>> "$tdir/host_expression"

	Rscript "$BIN_DIR/../$SCRIPTS_R/psi.R" \
		"$tdir/host_expression" \
		"$tdir/chimeric_expression" \
		"$i" \
		|| log_error "psi.R failed"
done > "$tdir/psi.tsv"

echo -e 'Id\tGene\tTranscript\tEvent_in\tSamples\tExpression_Median\tPsi\tCoding(?)\tObs' \
	> "$cod/results.tsv"

join \
	<(sort -k1,1 "$tdir/most_shared.tsv") \
	<(sort -k1,1 "$chimeric_info_tsv" | cut -f 1,5) \
	| sed 's/Novel //g' \
	| join \
		- \
		<(sort -k1,1 "$tdir/nsamplespertranscript.tsv") \
	| join \
		- \
		<(sed 's/"//g' "$cod/median.tsv" | sort -k1,1) \
	| sort -k4,4 \
	| join -1 4 -2 1 \
		- \
		<(sort "$tdir/psi.tsv") \
	| sort -k2,2 \
	| join -1 2 -2 1 \
		- \
		<(sort "$coding_classification_tsv" | sort -k1,1 | awk '{if ($3 > 0.9) print $1"\tCoding"; else print $1"\tNon-Coding"}') \
	| join -a 1 \
		- \
		<(sort "$pfam_info_dom_tsv" | cut -f 1,5 | sed 's/\ /espaco/g' | sort -k1,1) \
	| awk '{$2=""; print $0}' - \
	| sed 's/\ /\t/g' \
	| sed 's/espaco/\ /g' \
	>> "$cod/results.tsv"

mkdir -p "$cod/figures"

for i in $(awk '$2>=0.15{print $1}' "$tdir/psi.tsv" | sort -u) ; do
	head -n1 "$expression_expression_tsv" \
		> "$tdir/chimeric_expression"

	head -n1 "$expression_expression_tsv" \
		> "$tdir/host_expression"

	awk -v filter="$i" '
		NR==FNR && $_~filter {
			v[$1]=1;
			next
		}
		v[$1]' \
		"$chimeric_most_shared_tsv" \
		"$expression_expression_tsv" \
		>> "$tdir/chimeric_expression"

	awk -v filter="$i" '
		NR==FNR && $_~filter {
			v[$3]=1;
			next
		}
		v[$1]' \
		"$chimeric_most_shared_tsv" \
		"$expression_expression_tsv" \
		>> "$tdir/host_expression"

	Rscript "$BIN_DIR/../$SCRIPTS_R/boxplot.R" \
		"$tdir/host_expression" \
		"$tdir/chimeric_expression" \
		"$cod/figures/$i.svg" \
		> /dev/null 2>&1 \
		|| log_error "boxplot.R failed"
done

log_info "Done"
