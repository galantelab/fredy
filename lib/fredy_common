# vim:ft=sh

# Environment variables

## Set locale
export LC_ALL=C

# Global variables

## Myself
PROG_NAME='fredy'

## Our current version
VERSION='1.0.0'

## Where to find local scripts
SCRIPTS_R='scripts/R'
SCRIPTS_PYTHON='scripts/python'

# Print:
# script [func], if CMD_NAME and $1 are defined
# script func, if CMD_NAME is defined
# script, if none above
_say_myname() {
	if [[ -v CMD_NAME ]]; then
		if [[ $# -gt 0 ]]; then
			echo "$PROG_NAME [$CMD_NAME]"
		else
			echo "$PROG_NAME $CMD_NAME"
		fi
	else
		echo "$PROG_NAME"
	fi
}

# Log functions

## Print: date info|error script [func]: message
_log_template() {
	local log_type="$1"; shift
	local time=$(date '+%Y.%m.%d-%H.%M.%S')
	local name=$(_say_myname 1)
	echo -e "$time $log_type $name: $@" >&2
}

## Just call _log_template with type 'info'
log_info() {
	_log_template 'info' "$@"
}

## Just call _log_template with type 'info'
log_warn() {
	_log_template 'warn' "$@"
}

## Call _log_template and die
log_error() {
	_log_template 'error' "$@"
	exit 1
}

# Display functions

## Print: script func: message
_template() {
	local name=$(_say_myname)
	echo -e "$name: $@" >&2
}

## Print message to stderr
warn() {
	_template "$@"
}

## Print message to stderr and die
error() {
	_template "$@"
	exit 1
}

# Print to stderr a message and the string
# Try help 'prog cmd -h'  for more information
# After that, rust in piece
try_help_and_die() {
	local name=$(_say_myname)
	[[ $# -gt 0 ]] && warn "$@"
	echo -e "Try '$name -h' for more information" >&2
	exit 1
}

# Warn if we received a signal to exit
exit_on_signal() {
	log_warn "Received signal '$1'. Exiting ..."
	exit 255
}

for sig in SIGINT SIGQUIT SIGABRT SIGKILL SIGTERM; do
	trap "exit_on_signal $sig" $sig
done
